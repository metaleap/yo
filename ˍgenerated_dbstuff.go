// Code generated by `yo/db/codegen_dbstuff.go`. DO NOT EDIT
package yo

import q "yo/db/query"

import sl "yo/util/sl"

func ErrEntryFields(fields ...ErrEntryField) []q.F { return sl.To(fields, ErrEntryField.F) }

type ErrEntryField q.F

const (
	ErrEntryId            ErrEntryField = "Id"
	ErrEntryDtMade        ErrEntryField = "DtMade"
	ErrEntryDtMod         ErrEntryField = "DtMod"
	ErrEntryErr           ErrEntryField = "Err"
	ErrEntryErrDbRollback ErrEntryField = "ErrDbRollback"
	ErrEntryCtxVals       ErrEntryField = "CtxVals"
	ErrEntryHttpUrlPath   ErrEntryField = "HttpUrlPath"
	ErrEntryHttpFullUri   ErrEntryField = "HttpFullUri"
	ErrEntryNumCaught     ErrEntryField = "NumCaught"
)

func (me ErrEntryField) ArrLen(a1 ...interface{}) q.Operand { return ((q.F)(me)).ArrLen(a1...) }
func (me ErrEntryField) Asc() q.OrderBy                     { return ((q.F)(me)).Asc() }
func (me ErrEntryField) Desc() q.OrderBy                    { return ((q.F)(me)).Desc() }
func (me ErrEntryField) Equal(a1 interface{}) q.Query       { return ((q.F)(me)).Equal(a1) }
func (me ErrEntryField) Eval(a1 interface{}, a2 func(q.C) q.F) interface{} {
	return ((q.F)(me)).Eval(a1, a2)
}
func (me ErrEntryField) F() q.F                                { return ((q.F)(me)).F() }
func (me ErrEntryField) GreaterOrEqual(a1 interface{}) q.Query { return ((q.F)(me)).GreaterOrEqual(a1) }
func (me ErrEntryField) GreaterThan(a1 interface{}) q.Query    { return ((q.F)(me)).GreaterThan(a1) }
func (me ErrEntryField) In(a1 ...interface{}) q.Query          { return ((q.F)(me)).In(a1...) }
func (me ErrEntryField) InArr(a1 interface{}) q.Query          { return ((q.F)(me)).InArr(a1) }
func (me ErrEntryField) LessOrEqual(a1 interface{}) q.Query    { return ((q.F)(me)).LessOrEqual(a1) }
func (me ErrEntryField) LessThan(a1 interface{}) q.Query       { return ((q.F)(me)).LessThan(a1) }
func (me ErrEntryField) Not() q.Query                          { return ((q.F)(me)).Not() }
func (me ErrEntryField) NotEqual(a1 interface{}) q.Query       { return ((q.F)(me)).NotEqual(a1) }
func (me ErrEntryField) NotIn(a1 ...interface{}) q.Query       { return ((q.F)(me)).NotIn(a1...) }
func (me ErrEntryField) NotInArr(a1 interface{}) q.Query       { return ((q.F)(me)).NotInArr(a1) }
func (me ErrEntryField) StrLen(a1 ...interface{}) q.Operand    { return ((q.F)(me)).StrLen(a1...) }
