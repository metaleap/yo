// Code generated by `yo/db/codegen_dbstuff.go`. DO NOT EDIT
package yoauth

import q "yo/db/query"

import sl "yo/util/sl"

func UserAccountFields(fields ...UserAccountField) []q.F { return sl.As(fields, UserAccountField.F) }

type UserAccountField q.F

const (
	UserAccountId                  UserAccountField = "Id"
	UserAccountDtMade              UserAccountField = "DtMade"
	UserAccountDtMod               UserAccountField = "DtMod"
	UserAccountEmailAddr           UserAccountField = "EmailAddr"
	userAccountPwdHashed           UserAccountField = "pwdHashed"
	UserAccountFailedLoginAttempts UserAccountField = "FailedLoginAttempts"
	UserAccountLockout             UserAccountField = "Lockout"
)

func (me UserAccountField) ArrLen(a1 ...interface{}) q.Operand { return ((q.F)(me)).ArrLen(a1...) }
func (me UserAccountField) Asc() q.OrderBy                     { return ((q.F)(me)).Asc() }
func (me UserAccountField) Desc() q.OrderBy                    { return ((q.F)(me)).Desc() }
func (me UserAccountField) Equal(a1 interface{}) q.Query       { return ((q.F)(me)).Equal(a1) }
func (me UserAccountField) Eval(a1 interface{}, a2 func(q.C) q.F) interface{} {
	return ((q.F)(me)).Eval(a1, a2)
}
func (me UserAccountField) F() q.F { return ((q.F)(me)).F() }
func (me UserAccountField) GreaterOrEqual(a1 interface{}) q.Query {
	return ((q.F)(me)).GreaterOrEqual(a1)
}
func (me UserAccountField) GreaterThan(a1 interface{}) q.Query { return ((q.F)(me)).GreaterThan(a1) }
func (me UserAccountField) In(a1 ...interface{}) q.Query       { return ((q.F)(me)).In(a1...) }
func (me UserAccountField) InArr(a1 interface{}) q.Query       { return ((q.F)(me)).InArr(a1) }
func (me UserAccountField) LessOrEqual(a1 interface{}) q.Query { return ((q.F)(me)).LessOrEqual(a1) }
func (me UserAccountField) LessThan(a1 interface{}) q.Query    { return ((q.F)(me)).LessThan(a1) }
func (me UserAccountField) Not() q.Query                       { return ((q.F)(me)).Not() }
func (me UserAccountField) NotEqual(a1 interface{}) q.Query    { return ((q.F)(me)).NotEqual(a1) }
func (me UserAccountField) NotIn(a1 ...interface{}) q.Query    { return ((q.F)(me)).NotIn(a1...) }
func (me UserAccountField) NotInArr(a1 interface{}) q.Query    { return ((q.F)(me)).NotInArr(a1) }
func (me UserAccountField) StrLen(a1 ...interface{}) q.Operand { return ((q.F)(me)).StrLen(a1...) }

func UserPwdReqFields(fields ...UserPwdReqField) []q.F { return sl.As(fields, UserPwdReqField.F) }

type UserPwdReqField q.F

const (
	UserPwdReqId                     UserPwdReqField = "Id"
	UserPwdReqDtMade                 UserPwdReqField = "DtMade"
	UserPwdReqDtMod                  UserPwdReqField = "DtMod"
	UserPwdReqEmailAddr              UserPwdReqField = "EmailAddr"
	UserPwdReqDoneMailReqId          UserPwdReqField = "DoneMailReqId"
	userPwdReqTmpPwdHashed           UserPwdReqField = "tmpPwdHashed"
	UserPwdReqDoneMailReqId_Id       UserPwdReqField = "DoneMailReqId.Id"
	UserPwdReqDoneMailReqId_DtMade   UserPwdReqField = "DoneMailReqId.DtMade"
	UserPwdReqDoneMailReqId_DtMod    UserPwdReqField = "DoneMailReqId.DtMod"
	UserPwdReqDoneMailReqId_TmplId   UserPwdReqField = "DoneMailReqId.TmplId"
	UserPwdReqDoneMailReqId_TmplArgs UserPwdReqField = "DoneMailReqId.TmplArgs"
	UserPwdReqDoneMailReqId_MailTo   UserPwdReqField = "DoneMailReqId.MailTo"
	userPwdReqDoneMailReqId_dtDone   UserPwdReqField = "DoneMailReqId.dtDone"
)

func (me UserPwdReqField) ArrLen(a1 ...interface{}) q.Operand { return ((q.F)(me)).ArrLen(a1...) }
func (me UserPwdReqField) Asc() q.OrderBy                     { return ((q.F)(me)).Asc() }
func (me UserPwdReqField) Desc() q.OrderBy                    { return ((q.F)(me)).Desc() }
func (me UserPwdReqField) Equal(a1 interface{}) q.Query       { return ((q.F)(me)).Equal(a1) }
func (me UserPwdReqField) Eval(a1 interface{}, a2 func(q.C) q.F) interface{} {
	return ((q.F)(me)).Eval(a1, a2)
}
func (me UserPwdReqField) F() q.F { return ((q.F)(me)).F() }
func (me UserPwdReqField) GreaterOrEqual(a1 interface{}) q.Query {
	return ((q.F)(me)).GreaterOrEqual(a1)
}
func (me UserPwdReqField) GreaterThan(a1 interface{}) q.Query { return ((q.F)(me)).GreaterThan(a1) }
func (me UserPwdReqField) In(a1 ...interface{}) q.Query       { return ((q.F)(me)).In(a1...) }
func (me UserPwdReqField) InArr(a1 interface{}) q.Query       { return ((q.F)(me)).InArr(a1) }
func (me UserPwdReqField) LessOrEqual(a1 interface{}) q.Query { return ((q.F)(me)).LessOrEqual(a1) }
func (me UserPwdReqField) LessThan(a1 interface{}) q.Query    { return ((q.F)(me)).LessThan(a1) }
func (me UserPwdReqField) Not() q.Query                       { return ((q.F)(me)).Not() }
func (me UserPwdReqField) NotEqual(a1 interface{}) q.Query    { return ((q.F)(me)).NotEqual(a1) }
func (me UserPwdReqField) NotIn(a1 ...interface{}) q.Query    { return ((q.F)(me)).NotIn(a1...) }
func (me UserPwdReqField) NotInArr(a1 interface{}) q.Query    { return ((q.F)(me)).NotInArr(a1) }
func (me UserPwdReqField) StrLen(a1 ...interface{}) q.Operand { return ((q.F)(me)).StrLen(a1...) }
